<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>local.example</groupId>
    <artifactId>Spring-mvc-template</artifactId>
    <version>1.0</version>
    <packaging>war</packaging>

    <build>
        <plugins>
            <!--编译插件-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>11</source>
                    <target>11</target>
                </configuration>
            </plugin>

     <!--tomcat插件部署（启动部分项目会一直报错，建议使用本地tomcat）-->
            <!--
            <plugin>
                <groupId>org.opoo.maven</groupId>
                <artifactId>tomcat9-maven-plugin</artifactId>
                <version>3.0.0</version>
                <configuration>
                    <port>80</port>
                    <path>/</path>
                    <uriEncoding>UTF-8</uriEncoding>
                    <finalName>Spring-mvc-template</finalName>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.tomcat.maven</groupId>
                <artifactId>tomcat7-maven-plugin</artifactId>
                <version>2.2</version>
                <configuration>
                    <port>80</port>
                    <path>/</path>
                    <uriEncoding>UTF-8</uriEncoding>
                    <finalName>Spring-mvc-template</finalName>
                    <server>tomcat7</server>
                <port>8083</port> 端口号
                    <path>/</path>项目的启动路径
                    <finalName>spring</finalName>是项目名称
                    <server>tomcat7</server>是启动的命令名称
                    ###部分配置也可以在运行配置当中修改
                    ###远程部署暂时不做记录，用时百度
                </configuration>
            </plugin>

            #### jetty部署 ####
            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>9.4.7.v20180619</version>
                <configuration>
                    <httpConnector>8081</httpConnector>
                    <webAppConfig>
                        <contextPath>/</contextPath>
                    </webAppConfig>
                </configuration>
            </plugin>
            -->

        </plugins>
    </build>

    <!--统一版本-->
    <properties>
        <spring.version>5.3.8</spring.version>
        <slf4j.version>1.7.21</slf4j.version>
    </properties>

    <dependencies>
        <!--spring框架依赖-->

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <!--Spring-AOP切点表达式依赖-->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.7</version>
        </dependency>
        <!--spring切面-->

        <!--springmvc的坐标-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!--spring web的坐标-->
        <!--<dependency>-->
        <!--    <groupId>org.springframework</groupId>-->
        <!--    <artifactId>spring-web</artifactId>-->
        <!--    <version>${spring.version}</version>-->
        <!--</dependency>-->
        <!--spring切面-->
        <!--<dependency>-->
        <!--    <groupId>org.springframework</groupId>-->
        <!--    <artifactId>spring-aop</artifactId>-->
        <!--    <version>${spring.version}</version>-->
        <!--</dependency>-->
        <!--<dependency>-->
        <!--    <groupId>org.springframework</groupId>-->
        <!--    <artifactId>spring-context</artifactId>-->
        <!--    <version>${spring.version}</version>-->
        <!--</dependency>-->

<!--数据库框架-->
        <!--与mybatis-plus二选一-->
        <!--mybatis的依赖-->
        <!--<dependency>-->
        <!--    <groupId>org.mybatis</groupId>-->
        <!--    <artifactId>mybatis</artifactId>-->
        <!--    <version>3.5.7</version>-->
        <!--</dependency>-->
        <!--&lt;!&ndash;mybatis整合spring&ndash;&gt;-->
        <!--<dependency>-->
        <!--    <groupId>org.mybatis</groupId>-->
        <!--    <artifactId>mybatis-spring</artifactId>-->
        <!--    <version>2.0.6</version>-->
        <!--</dependency>-->

        <!--mybatis-plus依赖/内置分页插件-->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus</artifactId>
            <version>3.4.3</version>
        </dependency>
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-generator</artifactId>
            <version>3.4.1</version>
        </dependency>
        <!--freemarker模板引擎(引用mybatis-plus可以选择引入)-->
        <dependency>
            <groupId>org.freemarker</groupId>
            <artifactId>freemarker</artifactId>
            <version>2.3.31</version>
        </dependency>
<!--数据库框架-->

        <!--junit,和spring依赖关系-->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
            <scope>compile</scope>
        </dependency>

        <!--Spring整合junit单元测试依赖坐标spring-test-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.version}</version>
            <scope>compile</scope>
        </dependency>

        <!--mysql的依赖-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.25</version>
        </dependency>

        <!--连接池要交给spring-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.2.6</version>
        </dependency>

        <!--spring-jdbc操作***************-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <!--Spring-redis与spring结合，支持切入点表达式-->
        <!--<dependency>-->
        <!--    <groupId>org.springframework.data</groupId>-->
        <!--    <artifactId>spring-data-redis</artifactId>-->
        <!--    <version>2.5.2</version>-->
        <!--</dependency>-->
        <!--与redis原生打交道的依赖，具有redis本身的优点-->
        <dependency>
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
            <version>3.6.3</version>
        </dependency>

        <!--日志组合-->
        <!--日志框架的配置文件resources-->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.1.7</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
            <version>1.1.7</version>
        </dependency>


        <!--github分页插件-->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper</artifactId>
            <version>5.2.1</version>
        </dependency>

        <!--servlet3.1规范-->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
            <scope>provided</scope>
        </dependency>

        <!--jsp-->
        <dependency>
            <groupId>javax.servlet.jsp</groupId>
            <artifactId>jsp-api</artifactId>
            <version>2.2</version>
            <scope>provided</scope>
        </dependency>

        <!--json处理-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.76</version>
        </dependency>

        <!--强大的工具(基于字节码编制技术)-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.22</version>
        </dependency>

        <!--swagger2-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.9.2</version>
        </dependency>
        <!--官方的swagger-ui-->
        <!--<dependency>-->
        <!--    <groupId>io.springfox</groupId>-->
        <!--    <artifactId>springfox-swagger-ui</artifactId>-->
        <!--    <version>2.9.2</version>-->
        <!--</dependency>-->
        <!--自定义的swagger-ui 更好看一点，个人认为-->
        <dependency>
            <groupId>com.github.xiaoymin</groupId>
            <artifactId>swagger-bootstrap-ui</artifactId>
            <!--localhost:8080/doc.html-->
            <version>1.9.6</version>
        </dependency>

        <!--高效的工具类-->
        <!--由谷歌维护的为实现java函数式编程的类库-->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>30.1.1-jre</version>
        </dependency>
        <!--Hutool是一个小而全的Java工具类库，通过静态方法封装，降低相关API的学习成本，提高工作效率，
         使Java拥有函数式语言般的优雅，让Java语言也可以“甜甜的”。-->
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
            <version>5.7.11</version>
        </dependency>

        <!--实现Token登录-->
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt</artifactId>
            <version>0.9.1</version>
        </dependency>

        <!--发送email-->
        <!--<dependency>-->
        <!--    <groupId>org.glassfish</groupId>-->
        <!--    <artifactId>javax.mail</artifactId>-->
        <!--    <version>10.0-b28</version>-->
        <!--</dependency>-->

        <!--security安全框架-->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-core</artifactId>
            <version>5.5.1</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
            <version>5.5.1</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
            <version>5.5.1</version>
        </dependency>

<!-- 使用spring websocket依赖的jar包 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-websocket</artifactId>
            <version>${spring.version}</version>
            <!--<scope>provided</scope>-->
        </dependency>
<!-- 使用spring websocket依赖的jar包 -->

        <!--文件上传组件-->
        <dependency>
            <groupId>commons-fileupload</groupId>
            <artifactId>commons-fileupload</artifactId>
            <version>1.4</version>
        </dependency>

<!--JSP支持-->
        <!--jstl标准jsp标签库-->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
            <scope>provided</scope>
        </dependency>

        <!--jsp标签库集合-->
        <dependency>
            <groupId>taglibs</groupId>
            <artifactId>standard</artifactId>
            <version>1.1.2</version>
        </dependency>
<!--JSP支持-->



    </dependencies>

</project>